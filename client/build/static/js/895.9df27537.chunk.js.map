{"version":3,"file":"static/js/895.9df27537.chunk.js","mappings":"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","sources":["../node_modules/react-chartjs-2/src/utils.ts","../node_modules/react-chartjs-2/src/chart.tsx","../node_modules/react-chartjs-2/src/typedCharts.tsx","components/Charts.js"],"sourcesContent":["import type { MouseEvent } from 'react';\nimport type {\n  ChartType,\n  ChartData,\n  DefaultDataPoint,\n  ChartDataset,\n  ChartOptions,\n  Chart,\n} from 'chart.js';\n\nimport type { ForwardedRef } from './types';\n\nconst defaultDatasetIdKey = 'label';\n\nexport function reforwardRef<T>(ref: ForwardedRef<T>, value: T) {\n  if (typeof ref === 'function') {\n    ref(value);\n  } else if (ref) {\n    ref.current = value;\n  }\n}\n\nexport function setOptions<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(chart: Chart<TType, TData, TLabel>, nextOptions: ChartOptions<TType>) {\n  chart.options = { ...nextOptions };\n}\n\nexport function setLabels<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  currentData: ChartData<TType, TData, TLabel>,\n  nextLabels: TLabel[] | undefined\n) {\n  currentData.labels = nextLabels;\n}\n\nexport function setDatasets<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  currentData: ChartData<TType, TData, TLabel>,\n  nextDatasets: ChartDataset<TType, TData>[],\n  datasetIdKey = defaultDatasetIdKey\n) {\n  const addedDatasets: ChartDataset<TType, TData>[] = [];\n\n  currentData.datasets = nextDatasets.map(\n    (nextDataset: Record<string, unknown>) => {\n      // given the new set, find it's current match\n      const currentDataset = currentData.datasets.find(\n        (dataset: Record<string, unknown>) =>\n          dataset[datasetIdKey] === nextDataset[datasetIdKey]\n      );\n\n      // There is no original to update, so simply add new one\n      if (\n        !currentDataset ||\n        !nextDataset.data ||\n        addedDatasets.includes(currentDataset)\n      ) {\n        return { ...nextDataset } as ChartDataset<TType, TData>;\n      }\n\n      addedDatasets.push(currentDataset);\n\n      Object.assign(currentDataset, nextDataset);\n\n      return currentDataset;\n    }\n  );\n}\n\nexport function cloneData<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(data: ChartData<TType, TData, TLabel>, datasetIdKey = defaultDatasetIdKey) {\n  const nextData: ChartData<TType, TData, TLabel> = {\n    labels: [],\n    datasets: [],\n  };\n\n  setLabels(nextData, data.labels);\n  setDatasets(nextData, data.datasets, datasetIdKey);\n\n  return nextData;\n}\n\n/**\n * Get dataset from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getDatasetAtEvent(\n  chart: Chart,\n  event: MouseEvent<HTMLCanvasElement>\n) {\n  return chart.getElementsAtEventForMode(\n    event.nativeEvent,\n    'dataset',\n    { intersect: true },\n    false\n  );\n}\n\n/**\n * Get single dataset element from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getElementAtEvent(\n  chart: Chart,\n  event: MouseEvent<HTMLCanvasElement>\n) {\n  return chart.getElementsAtEventForMode(\n    event.nativeEvent,\n    'nearest',\n    { intersect: true },\n    false\n  );\n}\n\n/**\n * Get all dataset elements from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getElementsAtEvent(\n  chart: Chart,\n  event: MouseEvent<HTMLCanvasElement>\n) {\n  return chart.getElementsAtEventForMode(\n    event.nativeEvent,\n    'index',\n    { intersect: true },\n    false\n  );\n}\n","import React, { useEffect, useRef, forwardRef } from 'react';\nimport { Chart as ChartJS } from 'chart.js';\nimport type { ChartType, DefaultDataPoint } from 'chart.js';\n\nimport type { ForwardedRef, ChartProps, TypedChartComponent } from './types';\nimport {\n  reforwardRef,\n  cloneData,\n  setOptions,\n  setLabels,\n  setDatasets,\n} from './utils';\n\nfunction ChartComponent<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  {\n    height = 150,\n    width = 300,\n    redraw = false,\n    datasetIdKey,\n    type,\n    data,\n    options,\n    plugins = [],\n    fallbackContent,\n    updateMode,\n    ...props\n  }: ChartProps<TType, TData, TLabel>,\n  ref: ForwardedRef<ChartJS<TType, TData, TLabel>>\n) {\n  type TypedChartJS = ChartJS<TType, TData, TLabel>;\n\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const chartRef = useRef<TypedChartJS | null>();\n\n  const renderChart = () => {\n    if (!canvasRef.current) return;\n\n    chartRef.current = new ChartJS(canvasRef.current, {\n      type,\n      data: cloneData(data, datasetIdKey),\n      options,\n      plugins,\n    });\n\n    reforwardRef(ref, chartRef.current);\n  };\n\n  const destroyChart = () => {\n    reforwardRef(ref, null);\n\n    if (chartRef.current) {\n      chartRef.current.destroy();\n      chartRef.current = null;\n    }\n  };\n\n  useEffect(() => {\n    if (!redraw && chartRef.current && options) {\n      setOptions(chartRef.current, options);\n    }\n  }, [redraw, options]);\n\n  useEffect(() => {\n    if (!redraw && chartRef.current) {\n      setLabels(chartRef.current.config.data, data.labels);\n    }\n  }, [redraw, data.labels]);\n\n  useEffect(() => {\n    if (!redraw && chartRef.current && data.datasets) {\n      setDatasets(chartRef.current.config.data, data.datasets, datasetIdKey);\n    }\n  }, [redraw, data.datasets]);\n\n  useEffect(() => {\n    if (!chartRef.current) return;\n\n    if (redraw) {\n      destroyChart();\n      setTimeout(renderChart);\n    } else {\n      chartRef.current.update(updateMode);\n    }\n  }, [redraw, options, data.labels, data.datasets, updateMode]);\n\n  useEffect(() => {\n    renderChart();\n\n    return () => destroyChart();\n  }, []);\n\n  return (\n    <canvas ref={canvasRef} role='img' height={height} width={width} {...props}>\n      {fallbackContent}\n    </canvas>\n  );\n}\n\nexport const Chart = forwardRef(ChartComponent) as TypedChartComponent;\n","import React, { forwardRef } from 'react';\nimport {\n  Chart as ChartJS,\n  LineController,\n  BarController,\n  RadarController,\n  DoughnutController,\n  PolarAreaController,\n  BubbleController,\n  PieController,\n  ScatterController,\n} from 'chart.js';\nimport type { ChartType, ChartComponentLike } from 'chart.js';\n\nimport type {\n  ChartProps,\n  ChartJSOrUndefined,\n  TypedChartComponent,\n} from './types';\nimport { Chart } from './chart';\n\nfunction createTypedChart<T extends ChartType>(\n  type: T,\n  registerables: ChartComponentLike\n) {\n  ChartJS.register(registerables);\n\n  return forwardRef<ChartJSOrUndefined<T>, Omit<ChartProps<T>, 'type'>>(\n    (props, ref) => <Chart {...props} ref={ref} type={type} />\n  ) as TypedChartComponent<T, true>;\n}\n\nexport const Line = /* #__PURE__ */ createTypedChart('line', LineController);\n\nexport const Bar = /* #__PURE__ */ createTypedChart('bar', BarController);\n\nexport const Radar = /* #__PURE__ */ createTypedChart('radar', RadarController);\n\nexport const Doughnut = /* #__PURE__ */ createTypedChart(\n  'doughnut',\n  DoughnutController\n);\n\nexport const PolarArea = /* #__PURE__ */ createTypedChart(\n  'polarArea',\n  PolarAreaController\n);\n\nexport const Bubble = /* #__PURE__ */ createTypedChart(\n  'bubble',\n  BubbleController\n);\n\nexport const Pie = /* #__PURE__ */ createTypedChart('pie', PieController);\n\nexport const Scatter = /* #__PURE__ */ createTypedChart(\n  'scatter',\n  ScatterController\n);\n","import React from 'react'\r\nimport { Bar, Line, Pie } from \"react-chartjs-2\";\r\nimport { Spiner } from './Loading';\r\nexport const LineChart = ({ data, options, height, width }) => {\r\n  return (\r\n    <div style={{height:`${height}`, minWidth:`${width}`}}>\r\n      <Line data={data} options={options} />\r\n    </div>\r\n  )\r\n\r\n}\r\nexport const BarChart = ({ data, options, height, width }) => {\r\n  return (\r\n    <div style={{height:`${height}`, minWidth:`${width}`}}>\r\n      {!(data.datasets.length>0)?<Spiner/>:<Bar data={data} options={options}/>}\r\n    </div>\r\n  )\r\n}\r\nexport const PieChart = ({ data, options, height, width }) => {\r\n  return (\r\n    <div style={{minHeight:`${height}`, minWidth:`${width}`}}>\r\n       {!(data.datasets.length>0)?<Spiner/>:<Pie data={data} options={options} />}\r\n    </div>\r\n  )\r\n}\r\n\r\n"],"names":["defaultDatasetIdKey","reforwardRef","ref","value","current","setLabels","currentData","nextLabels","labels","setDatasets","nextDatasets","datasetIdKey","addedDatasets","datasets","map","nextDataset","currentDataset","find","dataset","data","includes","push","Object","assign","cloneData","nextData","ChartComponent","param","height","width","redraw","type","options","plugins","fallbackContent","updateMode","props","canvasRef","useRef","chartRef","renderChart","ChartJS","destroyChart","destroy","useEffect","chart","nextOptions","config","setTimeout","update","canvas","role","Chart","forwardRef","createTypedChart","registerables","Line","LineController","Bar","BarController","Pie","RadarController","DoughnutController","PolarAreaController","BubbleController","PieController","ScatterController","LineChart","style","minWidth","BarChart","length","PieChart","minHeight"],"sourceRoot":""}